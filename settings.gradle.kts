import kotlin.math.log

/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/7.4.2/userguide/multi_project_builds.html
 */

rootProject.name = "kotlin-dagger2"
include("web-app")


dependencyResolutionManagement {
    versionCatalogs {
        create("testLibs"){
            val ktorVersion = version("ktor-server","2.3.2")
            library("ktor-test","ktor.io","ktor-server-tests-jvm").versionRef(ktorVersion)

            val kotlinTestVersion = version("kotlin","1.8.22")
            library("kotlin-test-junit","org.jetbrains.kotlin","kotlin-test-junit").versionRef(kotlinTestVersion)
            library("kotlin-test","org.jetbrains.kotlin","kotlin-test").versionRef(kotlinTestVersion)
        }
        create("libs"){
            val ktorVersion = version("ktor-server","2.3.2")
            library("ktor-core", "io.ktor", "ktor-server-core-jvm").versionRef(ktorVersion)
            library("ktor-netty", "io.ktor","ktor-server-netty-jvm").versionRef(ktorVersion)
            library("ktor-content","io.ktor","ktor-server-content-negotiation").versionRef(ktorVersion)
            library("ktor-serialization","io.ktor","ktor-serialization-kotlinx-json").versionRef(ktorVersion)

            val dagger2Version = version("dagger2", "2.47")
            library("dagger2", "com.google.dagger", "dagger").versionRef(dagger2Version)
            library("dagger2-compiler", "com.google.dagger", "dagger-compiler").versionRef(dagger2Version)

            val logbackVersion = version("logback","1.2.11")
            library("logback","ch.qos.logback","logback-classic").versionRef(logbackVersion)

            val exposedVersion = version("kotlin-exposed", "0.41.1")
            library("exposed-core","org.jetbrains.exposed", "exposed-core").versionRef(exposedVersion)
            library("exposed-dao","org.jetbrains.exposed", "exposed-dao").versionRef(exposedVersion)
            library("exposed-jdbc","org.jetbrains.exposed", "exposed-jdbc").versionRef(exposedVersion)
            library("exposed-time","org.jetbrains.exposed", "exposed-java-time").versionRef(exposedVersion)
            bundle("exposed", listOf("exposed-core", "exposed-dao", "exposed-jdbc", "exposed-time"))

            val postgresJdbcDriverVersion = version("postgres", "42.6.0")
            library("postgres-driver","org.postgresql","postgresql").versionRef(postgresJdbcDriverVersion)
        }
    }
}
